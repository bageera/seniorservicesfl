/* @ besian
* imported from Charlotte theme "themes/beacon-theme_charlotte/js/image-sizing.js"
* and adapted to work with beacon themes
*/
if(!String.prototype.trim){String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}}
// Image Lazy Load - lazyload, sonar
// ------------------------
(function(jQuery){"use strict";var doc=jQuery(document),win=jQuery(window),images=jQuery(".beacon-lazy-load");function replaceImages(){images.each(function(i,el){if(jQuery(el).attr("data-lazy-load-img-src").length){if(inView(el)||jQuery(el).hasClass("no-lazy-load")){processImage(el)}}});baselineImg();//@besian: it fixes the margins of images after they are lazy loaded
}function inView(el){var elRect=el.getBoundingClientRect(),useThresh=true,xThresh=useThresh?100:0,//changed from 200 to 150 since it seems that it is a better threshold @besian
yThresh=useThresh?150:0;//changed from 200 to 150 since it seems that it is a better threshold @besian
if(elRect.top<=window.innerHeight-yThresh&&// top is above the window.bottom (increase window.bottom to pre-detect)  @besian: changed it to - yThresh instead of + yThresh since if it is + all images would load at the same time
elRect.left<=window.innerWidth-xThresh&&// left is left of the window.right (increase window.right to pre-detect) @besian: changed it to - yThresh instead of + yThresh since if it is + all images would load at the same time
elRect.bottom>=0-yThresh&&// bottom is below the window.top (decrease window.top to pre-detect)
elRect.right>=0-xThresh){return true}else{return false}}
/*
    * @besian
    * unlike in Charlotte themes, in Beacon themes we are not setting the data-lazy-load-img-src on the parent element
    * and then creating an img element on the fly to add it to the parent element, that is because in
    * beacon themes we don't want to add new markup (parent elements) as it will change the layout of
    * website pages. In Beacon themes we are doing the following:
    * 1. loading a default image placeholder as the src of the image (so that image does not look broken)
    * 2. when the user navigates to the image in the viewport we are copying the data-lazy-load-img-src of an image to
    * the src of the image
    */function processImage(el){if(jQuery(el).attr("src")){if(/\/lazy-load-placeholder\.png/g.test(jQuery(el).attr("src"))){
//adding fading effect
jQuery(el).attr("src",jQuery(el).attr("data-lazy-load-img-src")).stop(true,true).hide().fadeIn()}}else{jQuery(el).attr("src",jQuery(el).attr("data-lazy-load-img-src"))}}
/**
     * It fixes the bottom margin on images with "imgbase" class
     * imported from: beacon-theme_charlotte/js/theme.js
     * 01/26/18
     * @besian
     */function baselineImg(){jQuery(".imgbase").each(function(){var b=9,h=jQuery(this).height(),x=(b*Math.ceil(h/b)-h+9)/16;jQuery(this).closest(".tsI_img").css("margin-bottom",x+"em")})}
/**
     * When a module is set to No Sizing
     * we are stripping the timthumb params
     * as they are not needed
     */function stripParamsWhenNoSizing(){jQuery(".section img").each(function(key,value){var classInfo=jQuery(this).parents(".tsB").attr("class");if(classInfo){if(classInfo.indexOf("no_sizing")!==-1){var imgSrc=jQuery(this).attr("src");var qMark=imgSrc.indexOf("?");if(qMark!==-1){var imgSrcPath=imgSrc.substr(0,qMark);jQuery(this).attr("src",imgSrcPath)}}}})}win.on("scroll.imageLazyLoad",function(){if(images.length>0){replaceImages()}else{win.off("scroll.imageLazyLoad")}});doc.on("ready",function(){if(images.length>0){replaceImages();stripParamsWhenNoSizing()}});doc.on("domAltered",function(){images=jQuery(".theframe[data-image]").not('[data-image=""]');if(images.length>0){replaceImages()}})})(jQuery);